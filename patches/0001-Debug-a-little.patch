From a1d6f7f2385504f3efcddb8a2d64d6815749e429 Mon Sep 17 00:00:00 2001
From: Jason Reed <jcreed@gmail.com>
Date: Fri, 19 Apr 2024 11:53:31 -0400
Subject: [PATCH] Debug a little

---
 src/conf.c    | 51 ++++++++++++++++++++++++++-------------------------
 src/seq/seq.c | 43 ++++++++++++++++++++++---------------------
 2 files changed, 48 insertions(+), 46 deletions(-)

diff --git a/src/conf.c b/src/conf.c
index eca44c03..7a1b3710 100644
--- a/src/conf.c
+++ b/src/conf.c
@@ -51,7 +51,7 @@ any surplus whitespace is discarded. For example, the two sequences
 and
 
 \code
-  a 1 
+  a 1
      b 2
 \endcode
 
@@ -377,7 +377,7 @@ values in the current compound are used as configuration for the function.
 If the compound func.\<function_name\> is defined in the root node, then the
 library and function from this compound configuration are used, otherwise
 'snd_func_' is prefixed to the string and code from the ALSA library is used.
-The definition of a function looks like:</P> 
+The definition of a function looks like:</P>
 
 \code
 func.remove_first_char {
@@ -868,10 +868,10 @@ static int get_char_skip_comments(input_t *input)
 				break;
 		}
 	}
-		
+
 	return c;
 }
-			
+
 
 static int get_nonwhite(input_t *input)
 {
@@ -1057,7 +1057,7 @@ static int get_freestring(char **string, int id, input_t *input)
 	free_local_string(&str);
 	return c;
 }
-			
+
 static int get_delimstring(char **string, int delim, input_t *input)
 {
 	struct local_string str;
@@ -1145,7 +1145,7 @@ static int _snd_config_make(snd_config_t **config, char **id, snd_config_type_t
 	*config = n;
 	return 0;
 }
-	
+
 
 static int _snd_config_make_add(snd_config_t **config, char **id,
 				snd_config_type_t type, snd_config_t *parent)
@@ -1162,7 +1162,7 @@ static int _snd_config_make_add(snd_config_t **config, char **id,
 	return 0;
 }
 
-static int _snd_config_search(snd_config_t *config, 
+static int _snd_config_search(snd_config_t *config,
 			      const char *id, int len, snd_config_t **result)
 {
 	snd_config_iterator_t i, next;
@@ -1225,16 +1225,16 @@ static int parse_value(snd_config_t **_n, snd_config_t *parent, input_t *input,
 					return -EINVAL;
 				}
 			} else {
-				if (i <= INT_MAX) 
+				if (i <= INT_MAX)
 					err = _snd_config_make_add(&n, id, SND_CONFIG_TYPE_INTEGER, parent);
 				else
 					err = _snd_config_make_add(&n, id, SND_CONFIG_TYPE_INTEGER64, parent);
 				if (err < 0)
 					return err;
 			}
-			if (n->type == SND_CONFIG_TYPE_INTEGER) 
+			if (n->type == SND_CONFIG_TYPE_INTEGER)
 				n->u.integer = (long) i;
-			else 
+			else
 				n->u.integer64 = i;
 			*_n = n;
 			return 0;
@@ -1504,7 +1504,7 @@ static int parse_def(snd_config_t *parent, input_t *input, int skip, int overrid
 	free(id);
 	return err;
 }
-		
+
 static int parse_defs(snd_config_t *parent, input_t *input, int skip, int override)
 {
 	int c, err;
@@ -2772,7 +2772,7 @@ __make:
 int snd_config_imake_integer(snd_config_t **config, const char *id, const long value)
 {
 	int err;
-	
+
 	err = snd_config_make(config, id, SND_CONFIG_TYPE_INTEGER);
 	if (err < 0)
 		return err;
@@ -2802,7 +2802,7 @@ int snd_config_imake_integer(snd_config_t **config, const char *id, const long v
 int snd_config_imake_integer64(snd_config_t **config, const char *id, const long long value)
 {
 	int err;
-	
+
 	err = snd_config_make(config, id, SND_CONFIG_TYPE_INTEGER64);
 	if (err < 0)
 		return err;
@@ -2829,7 +2829,7 @@ int snd_config_imake_integer64(snd_config_t **config, const char *id, const long
 int snd_config_imake_real(snd_config_t **config, const char *id, const double value)
 {
 	int err;
-	
+
 	err = snd_config_make(config, id, SND_CONFIG_TYPE_REAL);
 	if (err < 0)
 		return err;
@@ -2860,7 +2860,7 @@ int snd_config_imake_string(snd_config_t **config, const char *id, const char *v
 {
 	int err;
 	snd_config_t *tmp;
-	
+
 	err = snd_config_make(&tmp, id, SND_CONFIG_TYPE_STRING);
 	if (err < 0)
 		return err;
@@ -2948,7 +2948,7 @@ int snd_config_imake_safe_string(snd_config_t **config, const char *id, const ch
 int snd_config_imake_pointer(snd_config_t **config, const char *id, const void *value)
 {
 	int err;
-	
+
 	err = snd_config_make(config, id, SND_CONFIG_TYPE_POINTER);
 	if (err < 0)
 		return err;
@@ -4406,7 +4406,7 @@ int snd_config_hook_load_for_all_cards(snd_config_t *root, snd_config_t *config,
 {
 	int card = -1, err;
 	snd_config_t *loaded;	// trace loaded cards
-	
+
 	err = snd_config_top(&loaded);
 	if (err < 0)
 		return err;
@@ -4484,7 +4484,7 @@ __fin_err:
 SND_DLSYM_BUILD_VERSION(snd_config_hook_load_for_all_cards, SND_CONFIG_DLSYM_VERSION_HOOK);
 #endif
 
-/** 
+/**
  * \brief Updates a configuration tree by rereading the configuration files (if needed).
  * \param[in,out] _top Address of the handle to the top-level node.
  * \param[in,out] _update Address of a pointer to private update information.
@@ -4520,7 +4520,7 @@ int snd_config_update_r(snd_config_t **_top, snd_config_update_t **_update, cons
 	snd_config_update_t *local;
 	snd_config_update_t *update;
 	snd_config_t *top;
-	
+
 	assert(_top && _update);
 	top = *_top;
 	update = *_update;
@@ -4654,7 +4654,7 @@ int snd_config_update_r(snd_config_t **_top, snd_config_update_t **_update, cons
 	return 1;
 }
 
-/** 
+/**
  * \brief Updates #snd_config by rereading the global configuration files (if needed).
  * \return 0 if #snd_config was up to date, 1 if #snd_config was
  *         updated, otherwise a negative error code.
@@ -4750,7 +4750,7 @@ void snd_config_unref(snd_config_t *cfg)
 	snd_config_unlock();
 }
 
-/** 
+/**
  * \brief Frees a private update structure.
  * \param[in] update The private update structure to free.
  * \return Zero if successful, otherwise a negative error code.
@@ -4767,7 +4767,7 @@ int snd_config_update_free(snd_config_update_t *update)
 	return 0;
 }
 
-/** 
+/**
  * \brief Frees the global configuration tree in #snd_config.
  * \return Zero if successful, otherwise a negative error code.
  *
@@ -4887,7 +4887,7 @@ typedef int (*snd_config_walk_callback_t)(snd_config_t *src,
 
 static int snd_config_walk(snd_config_t *src,
 			   snd_config_t *root,
-			   snd_config_t **dst, 
+			   snd_config_t **dst,
 			   snd_config_walk_callback_t callback,
 			   snd_config_expand_fcn_t fcn,
 			   void *private_data)
@@ -5414,7 +5414,7 @@ static int parse_string(const char **ptr, char **val)
 		buf[idx++] = c;
 	}
 }
-				
+
 
 /* Parse var=val or val */
 static int parse_arg(const char **ptr, unsigned int *varlen, char **val)
@@ -5514,7 +5514,7 @@ static int parse_args(snd_config_t *subs, const char *str, snd_config_t *defs)
 		}
 		return 0;
 	}
-	
+
 	while (1) {
 		char buf[256];
 		const char *var = buf;
@@ -5769,6 +5769,7 @@ int snd_config_search_definition(snd_config_t *config,
 				 const char *base, const char *name,
 				 snd_config_t **result)
 {
+  printf("in snd_config_search_definition... base=%s, name=%s\n", base, name);
 	snd_config_t *conf;
 	char *key;
 	const char *args = strchr(name, ':');
diff --git a/src/seq/seq.c b/src/seq/seq.c
index 5eac4848..461984ff 100644
--- a/src/seq/seq.c
+++ b/src/seq/seq.c
@@ -9,7 +9,7 @@
  * See \ref seq page for more details.
  */
 
-/* 
+/*
  *  Sequencer Interface - main file
  *
  *   This library is free software; you can redistribute it and/or modify
@@ -315,7 +315,7 @@ contains a combination of client id and port id numbers, defined as
 When an event is passed to sequencer from a client, sequencer fills
 source.client field
 with the sender's id automatically.
-It is the responsibility of sender client to 
+It is the responsibility of sender client to
 fill the port id of source.port and
 both client and port of dest field.
 
@@ -335,7 +335,7 @@ queue-control event
 like start, stop and continue queue, change tempo, etc.
 to the system timer port.
 Then the sequencer system handles the queue according to the received event.
-This port supports subscription. The received timer events are 
+This port supports subscription. The received timer events are
 broadcasted to all subscribed clients.
 
 The latter port does not receive messages but supports subscription.
@@ -830,7 +830,7 @@ static int snd_seq_open_conf(snd_seq_t **seqp, const char *name,
 	const char *id;
 	const char *lib = NULL, *open_name = NULL;
 	int (*open_func)(snd_seq_t **, const char *,
-			 snd_config_t *, snd_config_t *, 
+			 snd_config_t *, snd_config_t *,
 			 int, int) = NULL;
 #ifndef PIC
 	extern void *snd_seq_open_symbols(void);
@@ -932,7 +932,8 @@ static int snd_seq_open_noupdate(snd_seq_t **seqp, snd_config_t *root,
 	snd_config_t *seq_conf;
 	err = snd_config_search_definition(root, "seq", name, &seq_conf);
 	if (err < 0) {
-		SNDERR("Unknown SEQ %s", name);
+
+		SNDERR("Unknown SEQ name=%s", name);
 		return err;
 	}
 	snd_config_set_hop(seq_conf, hop);
@@ -971,7 +972,7 @@ static int snd_seq_open_noupdate(snd_seq_t **seqp, snd_config_t *root,
  * \sa snd_seq_open_lconf(), snd_seq_close(), snd_seq_type(), snd_seq_name(),
  *     snd_seq_nonblock(), snd_seq_client_id()
  */
-int snd_seq_open(snd_seq_t **seqp, const char *name, 
+int snd_seq_open(snd_seq_t **seqp, const char *name,
 		 int streams, int mode)
 {
 	snd_config_t *top;
@@ -1007,7 +1008,7 @@ int snd_seq_open(snd_seq_t **seqp, const char *name,
  *
  * \sa snd_seq_open()
  */
-int snd_seq_open_lconf(snd_seq_t **seqp, const char *name, 
+int snd_seq_open_lconf(snd_seq_t **seqp, const char *name,
 		       int streams, int mode, snd_config_t *lconf)
 {
 	assert(seqp && name && lconf);
@@ -1015,7 +1016,7 @@ int snd_seq_open_lconf(snd_seq_t **seqp, const char *name,
 }
 
 #ifndef DOC_HIDDEN
-int _snd_seq_open_lconf(snd_seq_t **seqp, const char *name, 
+int _snd_seq_open_lconf(snd_seq_t **seqp, const char *name,
 			int streams, int mode, snd_config_t *lconf,
 			snd_config_t *parent_conf)
 {
@@ -1634,7 +1635,7 @@ const unsigned char *snd_seq_client_info_get_event_filter(const snd_seq_client_i
  *
  * Remove all event types added with #snd_seq_client_info_event_filter_add and clear
  * the event filtering flag of this client_info container.
- * 
+ *
  * \sa snd_seq_client_info_event_filter_add(),
  *     snd_seq_client_info_event_filter_del(),
  *     snd_seq_client_info_event_filter_check(),
@@ -1652,8 +1653,8 @@ void snd_seq_client_info_event_filter_clear(snd_seq_client_info_t *info)
  * \brief Add an event type to the event filtering of a client_info container
  * \param info client_info container
  * \param event_type event type to be added
- * 
- * Set the event filtering flag of this client_info and add the specified event type to the 
+ *
+ * Set the event filtering flag of this client_info and add the specified event type to the
  * filter bitmap of this client_info container.
  *
  * \sa snd_seq_get_client_info(),
@@ -1707,7 +1708,7 @@ int snd_seq_client_info_event_filter_check(snd_seq_client_info_t *info, int even
 {
        assert(info);
        return snd_seq_get_bit(event_type, info->event_filter);
-} 
+}
 
 /**
  * \brief Get the number of opened ports of a client_info container
@@ -1948,7 +1949,7 @@ void snd_seq_client_info_set_event_filter(snd_seq_client_info_t *info, unsigned
  * \param client client id
  * \param info the pointer to be stored
  * \return 0 on success otherwise a negative error code
- * 
+ *
  * Obtains the information of the client with a client id specified by
  * info argument.
  * The obtained information is written on info parameter.
@@ -2841,7 +2842,7 @@ void snd_seq_port_subscribe_set_sender(snd_seq_port_subscribe_t *info, const snd
 	assert(info);
 	memcpy(&info->sender, addr, sizeof(*addr));
 }
-      
+
 /**
  * \brief Set destination address of a port_subscribe container
  * \param info port_subscribe container
@@ -3087,7 +3088,7 @@ int snd_seq_query_subscribe_get_num_subs(const snd_seq_query_subscribe_t *info)
 {
 	assert(info);
 	return info->num_subs;
-}	
+}
 
 /**
  * \brief Get the address of subscriber of a query_subscribe container
@@ -3439,7 +3440,7 @@ int snd_seq_create_queue(snd_seq_t *seq, snd_seq_queue_info_t *info)
  * \return the queue id (zero or positive) on success otherwise a negative error code
  *
  * \sa snd_seq_alloc_queue()
- */ 
+ */
 int snd_seq_alloc_named_queue(snd_seq_t *seq, const char *name)
 {
 	snd_seq_queue_info_t info;
@@ -3457,7 +3458,7 @@ int snd_seq_alloc_named_queue(snd_seq_t *seq, const char *name)
  *
  * \sa snd_seq_alloc_named_queue(), snd_seq_create_queue(), snd_seq_free_queue(),
  *     snd_seq_get_queue_info()
- */ 
+ */
 int snd_seq_alloc_queue(snd_seq_t *seq)
 {
 	return snd_seq_alloc_named_queue(seq, NULL);
@@ -3538,7 +3539,7 @@ int snd_seq_query_named_queue(snd_seq_t *seq, const char *name)
  * \brief Get the queue usage flag to the client
  * \param seq sequencer handle
  * \param q queue id
- * \return 1 = client is allowed to access the queue, 0 = not allowed, 
+ * \return 1 = client is allowed to access the queue, 0 = not allowed,
  *     otherwise a negative error code
  *
  * \sa snd_seq_get_queue_info(), snd_seq_set_queue_usage()
@@ -4012,7 +4013,7 @@ void snd_seq_queue_timer_set_type(snd_seq_queue_timer_t *info, snd_seq_queue_tim
 	assert(info);
 	info->type = (int)type;
 }
-	
+
 /**
  * \brief Set the timer id of a queue_timer container
  * \param info queue_timer container
@@ -4392,7 +4393,7 @@ static int snd_seq_event_retrieve_buffer(snd_seq_t *seq, snd_seq_event_t **retp)
  * \brief retrieve an event from sequencer
  * \param seq sequencer handle
  * \param ev event pointer to be stored
- * \return 
+ * \return
  *
  * Obtains an input event from sequencer.
  * The event is created via snd_seq_create_event(), and its pointer is stored on
@@ -4445,7 +4446,7 @@ static int snd_seq_event_input_feed(snd_seq_t *seq, int timeout)
 		SYSERR("poll");
 		return -errno;
 	}
-	if (pfd.revents & POLLIN) 
+	if (pfd.revents & POLLIN)
 		return snd_seq_event_read_buffer(seq);
 	return seq->ibuflen;
 }
-- 
2.34.1

